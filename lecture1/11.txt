reverse the right to again they're going to be two arguments a reference to the array that you're working on and also the number of elements in the subarray that this recursive call applies to whenever you're you're taking a structure in your chopping it into pieces you have to give it the whole structure and you have to somehow with other argument specify which piece you're working on in this case we do it by giving one extra and argument the size of the Subway on which to recur alright so how does this work this Prince out the rightmost an element's reversed and how does it do that it does it by performing the following two steps first print the rightmost and -1 elements reversed and then print the end element from the ride notice that it's exactly the same as the other algorithm just everywhere you see the word left replace it with right what is the same algorithm noticed except for one thing the recursive call comes first the print out an element operation come second in this case the other case we first printed out a specific element and then did the recursive call okay so let's look at an example of that I think I could fit it here again and equals four at the top level and again it's the array with four elements 1 2 3 4 so what's the first thing I do print the rightmost and -1 elements reverse another words the first thing you do is recur on that Subway notice you don't print anything because it's only after you return from this recursive call that you do a print so now I've entered another recursive invocation what do I do print the rightmost it here in equals 3 so print the rightmost two elements reversed that's these two again the first thing you do is a recursive call and I don't print anything until I returned from the recursive call them printed anything yet here in this box and equals the size of the subway were working on his to and then do it again print the rightmost one element reverse that's this element and equals 1 and then again we don't print anything until we return for the return from this recursive call one more recursive invocation when and is 1 and -1 is 0 so we print the rightmost zero elements so this is a recursive call on the empty array in that case there's nothing to do so I just returned and print out the four since I've returned from the recursive call I print for then I returned from the recursive call I print the second element from the right that's the three return from the recursive call I print the third element from the right that's the two return from the recursive call I print the fourth element from the right that's one so again the output is going to be in order for space three space to space one so I have printed out the array in reverse order did it differently noticed that in the first case we printed on the way down we first print then recur first print then recover first print then recover first print then recur then return do nothing return to nothing return do nothing return do nothing return in this case we first Ricker and don't print anything then we worker again don't bring anything then we Foraker again don't do anything then we break her again then we return in print then we returned and print and we return in print and then will return in Prince of the prince all happened on the way up okay let's look at the code for reverse an array to accomplish is the same thing but you know everything is swapped somehow left and right