then the K element subsets of this fall into two categories which two categories those that contain X and those that don't contain X okay so category 1 those which contain X as an element so how would you construct such a sad such a subset of s that contains X let's see I've got a set is the special element I want to form a subset that has that special element so grab that special element and set it aside and then pick in any way you like hay - 1 other elements from what's left and then to those K - 1 elements throw exit now for sure you have X in the subset you create it so picky K - 1 elements from s mine is X write the difference set then add x to the result so in how many ways can I do that and how many ways can I pick K - 1 elements from an end minus one element set well that's the same question were asking about right, how many ways can I choose full elements from bar elements right any number of elements from some larger collection of Ellen how many ways can I do that that's the problem is but this is a smaller instance of the same problem this is what recursion is about I have a problem I somehow break it into sub problem so this is a sub instance of the same problem so I have in -1 elements and I want to choose K - 1 elements from them we can do this in we don't have an answer but we have notation for the answer we can do it in C and -1 K - 1 ways so since I can form such a set in this many ways this is the number of subsets of this an element set i'm size K that are in this category that contain X okay so that's one category the other category is those which do not contain X okay so how would we form one of those how would you construct one of those just pick K elements from ask - x take your distinguished element and throw it away this time from the end - 1 elements left pik-k of them we can do this again this is another sub instance of the same problem we can do this in C N - 1 choose k c - 1 k alright so there's a ruling coming towards called the sum rule you can take it a collection of things and partition it into blocks and you want to count the whole the whole collection all you have to do is count the individual blocks and add up the number provided your partition is such that there's no overlap and everything is accounted for well everyone of the K element subsets of s fall into one of these two categories of either contain actual they don't contain X and this accounts for this accounts for all of them and no sir no subsets of us with K elements can both contains X and doesn't contain X so there's no overlap between the two blocks in our partition so therefore the number of K element subsets of an element set has to be the sum of these two numbers oops C and -1 k and that proves the formula and that is an example of how to think your way through just accounting problem recursively well now that we've done that now that we have the counting problem accomplished let's look at